public void ProgramStep(int input,  int a, int b, int c)
{
    int x = z % 26 + b;
    
    if (x != input)
        z = z / a * 26 + input + c;    // power of z grows or remains the same
    else
        z = z / a                      // power of z reduces or remains the same
} 

// strategy:
// when a == 1  =>  let Z grow (so we get that remainder (input + c) to work with on reduction steps)
// when a == 26 =>  let Z shrink (we aim for x == input, where X = remainder (input + c) from the previous step + b)


      (a,   b,  c)
 1:    1,  13,  6   =>   z = [6 + n[1]]
 2:    1,  11, 11   =>   z = [6 + n[1], 11 + n[2]]
 3:    1,  12,  5   =>   z = [6 + n[1], 11 + n[2], 5 + n[3]]
 4:    1,  10,  6   =>   z = [6 + n[1], 11 + n[2], 5 + n[3], 6 + n[4]]
 5:    1,  14,  8   =>   z = [6 + n[1], 11 + n[2], 5 + n[3], 6 + n[4], 8 + n[5]]    
 6:   26,  -1, 14   =>   z = [6 + n[1], 11 + n[2], 5 + n[3], 6 + n[4]]              // 8 + n[5] - 1  == n[6]
 7:    1,  14,  9   =>   z = [6 + n[1], 11 + n[2], 5 + n[3], 6 + n[4], 9 + n[7]]     
 8:   26, -16,  4   =>   z = [6 + n[1], 11 + n[2], 5 + n[3], 6 + n[4]]              // 9 + n[7] - 16 == n[8]
 9:   26,  -8,  7   =>   z = [6 + n[1], 11 + n[2], 5 + n[3]]                        // 6 + n[4] - 8  == n[9]
10:    1,  12, 13   =>   z = [6 + n[1], 11 + n[2], 5 + n[3], 13 + n[10]]
11:   26, -16, 11   =>   z = [6 + n[1], 11 + n[2], 5 + n[3]]                // 13 + n[10] - 16 == n[11]
12:   26, -13, 11   =>   z = [6 + n[1], 11 + n[2]]              // 5 + n[3] - 13 == n[12]
13:   26,  -6,  6   =>   z = [6 + n[1]]                 // 11 + n[2] - 6 == n[13]
14:   26,  -6,  1   =>   z = []                 // 6 + n[1] - 6 == n[14]

// 8 + n[5] - 1  == n[6]
n6 = n5 + 7

// 9 + n[7] - 16 == n[8]
n7 = n8 + 7
n8 = n7 - 7

// 6 + n[4] - 8  == n[9]
n4 = n9 + 2

// 13 + n[10] - 16 == n[11]
n10 = n11 + 3
n11 = n10 - 3

// 5 + n[3] - 13 == n[12]
n3 = n12 + 8

// 11 + n[2] - 6 == n[13]
n13 = n2 + 5

// 6 + n[1] - 6 == n[14]
n14 = n1

n1 : 1..9
n2 : 1..4
n3 : 9
n4 : 3..9
n5 : 1..2
n6 : n5 + 7
n7 : 8..9
n8 : n7 - 7
n9 : n4 - 2
n10: 4..9 
n11: n10 - 3
n12: 1
n13: n2 + 5
n14: n1

