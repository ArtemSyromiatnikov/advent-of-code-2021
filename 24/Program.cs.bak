using System.Text.RegularExpressions;
using System.Diagnostics;

var input = @"inp x
mul x -1";
var input1 = File.ReadAllText("input1.txt");
var input2 = File.ReadAllText("input2.txt");
var inputFull = File.ReadAllText("inputFull.txt");
var input4 = @"inp x
div x 2";





//var program = new Runtime(Parser.Parse(input), new[] { 1 });
//var program = new Runtime(Parser.Parse(input1), new[] { 27, 81 });

// for (int i = 0; i < 16; i++)
// {
//     var program = new Runtime(Parser.Parse(input2), new[] { i });
//     program.Execute();
// }

// division study
// var programInputs = new[] { -10, -5, -3, -1, 0, 3, 8, 15 };
// foreach (var programInput in programInputs)
// {
//     var program = new Runtime(Parser.Parse(input4), new[] { programInput });
//     program.Execute();
// }


 

//99999849337555
var commands = Parser.Parse(inputFull);
// foreach(var command in commands)
//     Console.WriteLine(command);

var serial1 = new[] { 9,9,9,9,9,8,4,9,3,3,7,5,5,5 };
var program1 = new Runtime(commands, serial1);
program1.Execute(true);
Console.WriteLine(program1.PrintMemory());
return;


Stopwatch sw = Stopwatch.StartNew();
long iteration = 1;

for(int d0 = 9; d0 > 0; d0--)
for(int d1 = 9; d1 > 0; d1--)
for(int d2 = 9; d2 > 0; d2--)
for(int d3 = 9; d3 > 0; d3--)
for(int d4 = 9; d4 > 0; d4--)
for(int d5 = 9; d5 > 0; d5--)
for(int d6 = 9; d6 > 0; d6--)
for(int d7 = 9; d7 > 0; d7--)
for(int d8 = 9; d8 > 0; d8--)
for(int d9 = 9; d9 > 0; d9--)
for(int d10 = 9; d10 > 0; d10--)
for(int d11 = 9; d11 > 0; d11--)
for(int d12 = 9; d12 > 0; d12--)
for(int d13 = 9; d13 > 0; d13--)
{
    iteration++;
    if (iteration % 1_000_000 == 0)
        Console.WriteLine($"Iteration: {iteration}, time passed: {sw.Elapsed}");
    
    var serial = new[] { d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13 };
    var program = new Runtime(commands, serial);
    program.Execute();
    if (program.Memory['z'] == 0)
    {
        Console.WriteLine(String.Join(null, serial));
    }
}




public class Runtime
{
    public Command[] Commands { get; }
    public Queue<int> Input { get; }

    public Dictionary<char, int> Memory { get; } = new()
    {
        ['w'] = 0,
        ['x'] = 0,
        ['y'] = 0,
        ['z'] = 0
    };

    public Runtime(Command[] commands, int[] input)
    {
        Commands = commands;
        Input = new Queue<int>(input);
    }

    public void Execute(bool verbose = false)
    {
        if (verbose) Console.WriteLine($"Input: {String.Join(", ", Input.AsEnumerable())}");
        
        foreach (var command in Commands)
        {
            ExecuteCommand(command);
            if (verbose) Console.WriteLine($"{command.ToString().PadRight(10)}{PrintMemory()}");
        }
        if (verbose) Console.WriteLine($"Done:     {PrintMemory()}");
    }

    private void ExecuteCommand(Command command)
    {
        switch (command)
        {
            case Input inp:
                Memory[inp.Variable.Name] = Input.Dequeue();
                break;
                
            case Add add:
                Memory[add.Arg1.Name] += GetValue(add.Arg2); 
                break;
                
            case Divide div:
                var result = 1.0 * Memory[div.Arg1.Name] / GetValue(div.Arg2);
                Memory[div.Arg1.Name] = result > 0
                    ? (int)Math.Floor(result)
                    : (int)Math.Ceiling(result);
                break;
                
            case Equal eql:
                var isEqual = Memory[eql.Arg1.Name] == GetValue(eql.Arg2);
                Memory[eql.Arg1.Name] = isEqual ? 1 : 0;
                break;
                
            case Modulo mod:
                Memory[mod.Arg1.Name] %= GetValue(mod.Arg2);
                break;
                
            case Multiply mul:
                Memory[mul.Arg1.Name] *= GetValue(mul.Arg2);
                break;

            default:
                throw new ArgumentOutOfRangeException(nameof(command));
        }
    }

    private int GetValue(ValueType valueType) =>
        valueType switch
        {
            Variable variable => Memory[variable.Name],
            Literal literal   => literal.Value
        };

    public string PrintMemory()
        => $"w={Memory['w'], 3},    x={Memory['x'], 3},    y={Memory['y'], 3},    z={Memory['z'], 3}";
    
}


public static class Parser
{
    private static readonly Regex _unaryRegex = new Regex(@"\w{3} (?<param1>\w)");
    private static readonly Regex _binaryRegex = new Regex(@"\w{3} (?<param1>\w) (?<param2>.+)");

    public static Command[] Parse(String programText)
        =>  programText
            .Split(Environment.NewLine, StringSplitOptions.TrimEntries | StringSplitOptions.RemoveEmptyEntries)
            .Select(line => Parser.LineToCommand(line))
            .ToArray();
    
    public static Command LineToCommand(string line)
    {
        if (line.StartsWith("inp"))
        {
            var match = _unaryRegex.Match(line);
            var arg1 = new Variable(match.Groups["param1"].Value[0]);
            return new Input(arg1);
        }
        else if (line.StartsWith("add"))
        {
            ParseBinaryParams(line, out var arg1, out var arg2);
            return new Add(arg1, arg2);
        }
        else if (line.StartsWith("mul"))
        {
            ParseBinaryParams(line, out var arg1, out var arg2);
            return new Multiply(arg1, arg2);
        }
        else if (line.StartsWith("div"))
        {
            ParseBinaryParams(line, out var arg1, out var arg2);
            return new Divide(arg1, arg2);
        }
        else if (line.StartsWith("mod"))
        {
            ParseBinaryParams(line, out var arg1, out var arg2);
            return new Modulo(arg1, arg2);
        }
        else if (line.StartsWith("eql"))
        {
            ParseBinaryParams(line, out var arg1, out var arg2);
            return new Equal(arg1, arg2);
        }

        throw new Exception($"Can't parse {line}");
    }

    private static void ParseBinaryParams(string line, out Variable var1, out ValueType var2)
    {
        var match = _binaryRegex.Match(line);
        
        var1 = new Variable(match.Groups["param1"].Value[0]);

        var param2Str = match.Groups["param2"].Value;
        if (Int32.TryParse(param2Str, out int number))
            var2 = new Literal(number);
        else
            var2 = new Variable(param2Str[0]);
    }
}

public abstract record ValueType();
public record Literal(int Value) : ValueType
{
    public override string ToString() => Value.ToString();
}
public record Variable(char Name) : ValueType
{
    public override string ToString() => Name.ToString();
}

public abstract record Command();
public record Input(Variable Variable) : Command
{
    public override string ToString() => $"==inp {Variable}";
}
public record Add(Variable Arg1, ValueType Arg2) : Command
{
    public override string ToString() => $"add {Arg1} {Arg2}";
}
public record Multiply(Variable Arg1, ValueType Arg2) : Command
{
    public override string ToString() => $"mul {Arg1} {Arg2}";
}
public record Divide(Variable Arg1, ValueType Arg2) : Command
{
    public override string ToString() => $"div {Arg1} {Arg2}";
}
public record Modulo(Variable Arg1, ValueType Arg2) : Command
{
    public override string ToString() => $"mod {Arg1} {Arg2}";
}
public record Equal(Variable Arg1, ValueType Arg2) : Command
{
    public override string ToString() => $"eql {Arg1} {Arg2}";
}